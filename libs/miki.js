// Generated by CoffeeScript 1.9.1
var Miki, _, phantom, redis, redisModule, rooms, schedules;

redisModule = require('redis');

phantom = require('phantom');

_ = require('underscore');

schedules = [];

rooms = [];

redis = {};

Miki = (function() {
  function Miki(config) {
    this.config = config;
    console.log("redis server: " + this.config.redis_host + ":" + this.config.redis_port);
    redis = redisModule.createClient(this.config.redis_port, this.config.redis_host);
    redis.lrange([this.config.scheduleKey, 0, -1], function(err, replies) {
      var j, len, r, results, s;
      results = [];
      for (j = 0, len = replies.length; j < len; j++) {
        r = replies[j];
        s = JSON.parse(r);
        results.push(schedules.push(s));
      }
      return results;
    });
    this.generaterTimer = void 0;
    this.generater = (function(_this) {
      return function() {
        var headlessUrl;
        headlessUrl = "http://" + _this.config.host + ":" + _this.config.port + "/" + _this.config.headless;
        return phantom.create(function(ph) {
          return ph.createPage(function(page) {
            return page.open(headlessUrl, function(status) {
              page.render('static_content/schedule.png');
              console.log("Output on " + new Date());
              return ph.exit();
            });
          });
        });
      };
    })(this);
  }

  Miki.prototype.getSchedules = function() {
    return schedules;
  };

  Miki.prototype.setSchedule = function(schedule) {
    var found, i, j, k, ref, ref1, ret, s;
    found = false;
    for (i = j = 0, ref = schedules.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      s = schedules[i];
      if (s.order === schedule.order) {
        s.begin = schedule.begin;
        s.end = schedule.end;
        s.description = schedule.description;
        found = true;
        break;
      }
    }
    if (!found) {
      schedules.push(schedule);
    }
    ret = [];
    redis.del(this.config.scheduleKey);
    for (i = k = 0, ref1 = schedules.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      s = schedules[i];
      if (s.begin.length === 0 && s.end.length === 0 && s.description.length === 0) {

      } else {
        s.order = i + 1;
        ret.push(s);
        redis.rpush(this.config.scheduleKey, JSON.stringify(s));
      }
    }
    redis.ltrim(this.config.scheduleKey, 0, ret.length - 1);
    schedules = ret;
    this.generatePic();
    return schedules;
  };

  Miki.prototype.generatePic = function() {
    clearTimeout(this.generaterTimer);
    return this.generaterTimer = setTimeout(this.generater, 5000);
  };

  Miki.prototype.getRooms = function() {
    return rooms;
  };

  Miki.prototype.updateRoom = function(room) {
    var roomExisted;
    roomExisted = _.find(rooms, function(r) {
      return r.room_id === room.room_id;
    });
    if (roomExisted != null) {
      roomExisted.show_status = room.show_status;
      roomExisted.room_name = room.room_name;
      return roomExisted.show_time = room.show_time;
    } else {
      return rooms.push(room);
    }
  };

  Miki.prototype.createRequestOptions = function(url, host) {
    var headers, options;
    headers = {
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      'Accept-Encoding': 'gzip, deflate, sdch',
      'Accept-Language': 'en-US,en;q=0.8',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'Host': host,
      'Pragma': 'no-cache',
      'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.2 Safari/537.36'
    };
    options = {
      url: url,
      headers: headers,
      gzip: true,
      agent: false,
      timeout: 7000
    };
    console.log("REQUEST: " + url);
    return options;
  };

  return Miki;

})();

module.exports = Miki;
