// Generated by CoffeeScript 1.8.0
var Kojimako, jade, request, restify, _;

restify = require('restify');

jade = require('jade');

request = require('request');

_ = require('underscore');

Kojimako = (function() {
  function Kojimako(miki) {
    this.miki = miki;
    this.updateSchedule = (function(_this) {
      return function(req, res, next) {
        if (req.params.token !== _this.miki.config.token) {
          res.send(401, "{error: 'wrong token'}");
        } else {
          _this.miki.setSchedule(req.params);
        }
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        return res.end("errcode:0");
      };
    })(this);
    this.getSchedules = (function(_this) {
      return function(req, res, next) {
        var respList;
        respList = _this.miki.getSchedules().map(function(s) {
          return {
            begin: s.begin,
            end: s.end,
            description: s.description,
            duration: s.duration,
            detail: s.detail,
            order: s.order
          };
        });
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        return res.end(JSON.stringify(respList));
      };
    })(this);
    this.getRooms = (function(_this) {
      return function(req, res, next) {
        var roomList;
        roomList = _.chain(_this.miki.getRooms()).filter(function(r) {
          console.log(r);
          if (r.always_show === true || r.show_status === 1) {
            return true;
          }
        }).map(function(r) {
          return _.pick(r, 'room_id', 'show_status', 'show_details', 'show_time', 'room_name', 'room_src', 'owner_uid', 'fans');
        }).value();
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        return res.end(JSON.stringify(roomList));
      };
    })(this);
    this.getSnapImage = function(req, res, next) {
      var douyuUrl, options;
      douyuUrl = this.miki.config.douyuWebPicUrl + req.url.replace("snap/", "");
      options = {
        hostname: 'staticlive.douyutv.com',
        port: 80,
        path: douyuUrl,
        method: 'GET'
      };
      res.setHeader('Access-Control-Allow-Origin', '*');
      return request.get(douyuUrl).pipe(res);
    };
    this.getAvatarImage = function(req, res, next) {
      var avatarUrl, options;
      avatarUrl = "" + this.miki.config.douyuAvatarAPI + "?uid=" + req.params.uid + "&size=big";
      options = {
        hostname: 'uc.douyutv.com',
        port: 80,
        path: avatarUrl,
        method: 'GET'
      };
      res.setHeader('Access-Control-Allow-Origin', '*');
      return request.get(avatarUrl).pipe(res);
    };
    this.renderIndex = (function(_this) {
      return function(req, res, next) {
        var html, schedules;
        console.log('render index');
        schedules = _this.miki.getSchedules();
        html = jade.renderFile('templates/index.jade', {
          schedules: schedules
        });
        return res.end(html);
      };
    })(this);
    this.renderManage = (function(_this) {
      return function(req, res, next) {
        var html, schedules;
        console.log("rendermanage");
        schedules = _this.miki.getSchedules();
        html = jade.renderFile('templates/manage.jade', {
          schedules: schedules
        });
        res.setHeader('Content-Type', 'text/html');
        res.writeHead(200);
        return res.end(html);
      };
    })(this);
    this.renderHeaderless = (function(_this) {
      return function(req, res, next) {
        var html, schedules;
        schedules = _this.miki.getSchedules();
        html = jade.renderFile('templates/headless.jade', {
          schedules: schedules
        });
        res.setHeader('Content-Type', 'text/html');
        res.writeHead(200);
        return res.end(html);
      };
    })(this);
  }

  Kojimako.prototype.startServer = function() {
    var page404, server;
    page404 = '../static_content/404.html';
    server = restify.createServer({
      formatters: {
        'text/html': function(req, res, body) {
          var stat;
          if (res.statusCode === 404) {
            stat = fs.statSync(page404);
            res.cache({
              maxAge: 43200
            });
            res.set('Content-Length', stat.size);
            res.set('Last-Modified', stat.mtime);
            return fs.readFileSync(page404, {
              'encoding': 'utf8'
            });
          }
        }
      }
    });
    server.use(restify.queryParser());
    server.use(restify.bodyParser());
    server.post('/api/list/:token', this.updateSchedule);
    server.get('/api/list/:token', this.getSchedules);
    server.get('/api/list', this.getSchedules);
    server.get('/api/room', this.getRooms);
    server.get('/headless', this.renderHeaderless);
    server.get('/snap/.*', this.getSnapImage);
    server.get('/avatar/:uid', this.getAvatarImage);
    server.get('/' + this.miki.config.managePath, this.renderManage);
    server.get('/', this.renderIndex);
    server.get(/.*/, restify.serveStatic({
      'directory': 'static_content',
      'default': '../index.html',
      'maxAge': 43200
    }));
    return server.listen(this.miki.config.port, (function(_this) {
      return function() {
        console.log("server started:");
        return console.log("http://" + _this.miki.config.host + ":" + _this.miki.config.port + "/");
      };
    })(this));
  };

  return Kojimako;

})();

module.exports = Kojimako;
