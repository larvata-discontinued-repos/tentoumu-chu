// Generated by CoffeeScript 1.7.1
(function() {
  var App, AppView, Schedule, ScheduleList, ScheduleView, Schedules, checkToken, token;
  token = '';
  checkToken = function() {
    token = $.cookie('token');
    if (token === void 0 || token === '') {
      token = $('#token').val();
      $.cookie('token', token);
    }
    if (token !== void 0 && token.length > 0) {
      $('.container .jumbotron.first').hide();
      return $('.container .jumbotron.head').show();
    }
  };
  $('#saveToken').click(function() {
    return checkToken();
  });
  checkToken();
  Schedule = Backbone.Model.extend({
    defaults: function() {
      return {
        begin: null,
        end: null,
        duration: 0,
        detail: '',
        order: Schedules.nextItem(),
        done: function() {
          return false;
        }
      };
    }
  });
  ScheduleList = Backbone.Collection.extend({
    model: Schedule,
    url: 'api/list/' + token,
    nextItem: function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('order') + 1;
    },
    comparator: 'order'
  });
  Schedules = new ScheduleList;
  ScheduleView = Backbone.View.extend({
    tagName: 'tr',
    template: _.template($('#item-template').html()),
    events: {
      'click a.destroy': 'clear',
      'keypress .edit': 'updateOnEnter',
      'blur .view': 'close',
      'focus .view': 'edit'
    },
    initialize: function() {
      this.listenTo(this.model, 'change', this.render);
      return this.listenTo(this.model, 'destroy', this.remove);
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.inputBegin = this.$('.begin');
      this.inputEnd = this.$('.end');
      this.inputDescription = this.$('.description');
      return this;
    },
    edit: function() {
      return this.$el.addClass('editing');
    },
    close: function() {
      setTimeout((function(_this) {
        return function() {
          if (_this.model.get('begin') !== _this.inputBegin.val()) {
            _this.model.save({
              begin: _this.inputBegin.val() || ''
            });
          }
          if (_this.model.get('end') !== _this.inputEnd.val()) {
            _this.model.save({
              end: _this.inputEnd.val() || ''
            });
          }
          if (_this.model.get('description') !== _this.inputDescription.val()) {
            return _this.model.save({
              description: _this.inputDescription.val() || ''
            });
          }
        };
      })(this), 1);
      return this.$el.removeClass('editing');
    },
    updateOnEnter: function(e) {
      if (e.keyCode === 13) {
        return this.close();
      }
    },
    clear: function() {
      return this.model.destroy();
    }
  });
  AppView = Backbone.View.extend({
    el: $('#scheduleApp'),
    events: {
      'keypress #new-schedule>td>input:last': "createOnEnter"
    },
    initialize: function() {
      this.inputBegin = this.$('#new-schedule>td>input.begin');
      this.inputEnd = this.$('#new-schedule>td>input.end');
      this.inputDescription = this.$('#new-schedule>td>input.description');
      this.listenTo(Schedules, 'add', this.addOne);
      this.listenTo(Schedules, 'reset', this.addAll);
      this.listenTo(Schedules, 'all', this.render);
      this.main = $('#main');
      return Schedules.fetch();
    },
    render: function() {},
    addOne: function(schedule) {
      var ele, view;
      view = new ScheduleView({
        model: schedule
      });
      ele = view.render().el;
      return this.$('#new-schedule').before(ele);
    },
    addAll: function() {
      return Schedules.each(this.addOne, this);
    },
    createOnEnter: function(e) {
      if (e.keyCode !== 13) {
        return;
      }
      Schedules.create({
        begin: this.inputBegin.val() || '',
        end: this.inputEnd.val() || '',
        description: this.inputDescription.val() || ''
      });
      this.inputBegin.val('');
      this.inputEnd.val('');
      return this.inputDescription.val('');
    }
  });
  return App = new AppView;
})();
