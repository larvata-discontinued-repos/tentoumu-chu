// Generated by CoffeeScript 1.9.3
var FluxibleComponent, HtmlComponent, React, Router, Server, apiRouter, app, debug, express, miki, navigateAction, serialize;

express = require('express');

apiRouter = require('./apiRouter');

React = require('react');

Router = require('react-router');

navigateAction = require('../actions/navigate');

app = require('./app');

serialize = require('serialize-javascript');

debug = require('debug')('Example');

FluxibleComponent = require('fluxible/addons/FluxibleComponent');

HtmlComponent = React.createFactory(require('../components/Html.jsx'));

miki = require('../services/miki');

Server = (function() {
  function Server() {}

  Server.prototype.start = function() {
    var fetchrPlugin, server, staticPath;
    server = express();
    staticPath = __dirname + "/../../build";
    server.use('/build', express["static"](staticPath));
    server.use('/api', apiRouter);
    fetchrPlugin = app.getPlugin('FetchrPlugin');
    server.use(fetchrPlugin.getXhrPath(), fetchrPlugin.getMiddleware);
    server.use(function(req, res, next) {
      var context;
      context = app.createContext({
        req: req,
        xhrContext: {
          _csrf: req.csrfToken()
        }
      });
      debug('Executing navigate action');
      Router.run(app.getComponent(), req.path, function(Handler, state) {
        context.executeAction(navigateAction, state, function(err) {
          var Component, exposed, html;
          if (err) {
            if (err.statusCode && err.statusCode === 404) {
              next();
            } else {
              next(err);
            }
            return;
          }
          debug('Exposing context state');
          exposed = 'window.App=' + serialize(app.dehydrate(context)) + ';';
          debug('Rendering Application component into html');
          Component = React.createFactory(Handler);
          html = React.renderToStaticMarkup(HtmlComponent({
            state: exposed,
            markup: React.renderToString(React.createElement(FluxibleComponent, {
              context: context.getComponentContext()
            }, Component()))
          }));
          debug('Sending markup');
          res.send(html);
        });
      });
    });
    server.listen(miki.config.port);
    return console.log('Listening on port ' + miki.config.port);
  };

  return Server;

})();

module.exports = new Server();
