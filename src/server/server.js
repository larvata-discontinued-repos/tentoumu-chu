// Generated by CoffeeScript 1.9.3
var FluxibleComponent, HtmlComponent, React, Router, Server, app, bodyParser, cookieParser, csrf, debug, express, fetchData, miki, renderApp, routes, serialize, showSchedule;

express = require('express');

React = require('react');

Router = require('react-router');

bodyParser = require('body-parser');

showSchedule = require('../actions/showSchedule');

require('node-jsx').install({
  extension: '.jsx'
});

app = require('./app');

serialize = require('serialize-javascript');

debug = require('debug')('Example');

FluxibleComponent = require('fluxible/addons/FluxibleComponent');

cookieParser = require('cookie-parser');

csrf = require('csurf');

HtmlComponent = React.createFactory(require('../components/Html.jsx'));

miki = require('../assistance/miki');

routes = require('../components/Routes.jsx');

fetchData = require('../utils/fetchData');

renderApp = function(context, Handler, cb) {
  var Component, appMarkup, dehydratedState, html;
  console.log("start renderapp");
  dehydratedState = "window.App=" + (serialize(app.dehydrate(context))) + ";";
  Component = React.createElement(Handler);
  appMarkup = React.renderToString(React.createElement(FluxibleComponent, {
    context: context.getComponentContext()
  }, Component));
  html = React.renderToStaticMarkup(HtmlComponent({
    state: dehydratedState,
    markup: appMarkup
  }));
  return cb(null, html);
};

Server = (function() {
  function Server() {}

  Server.prototype.start = function() {
    var fetchrPlugin, server, staticPath;
    server = express();
    server.use(bodyParser.json());
    staticPath = __dirname + "/../../build";
    server.use('/build', express["static"](staticPath));
    fetchrPlugin = app.getPlugin('FetchrPlugin');
    fetchrPlugin.registerService(require('../services/schedule'));
    console.log("fetchrPlugin.getXhrPath: " + (fetchrPlugin.getXhrPath()));
    server.use(fetchrPlugin.getXhrPath(), fetchrPlugin.getMiddleware());
    server.use((function(_this) {
      return function(req, res, next) {
        var context, router;
        context = app.createContext({
          req: req,
          xhrContext: {}
        });
        router = Router.create({
          routes: routes,
          location: req.url,
          transitionContext: context,
          onAbort: function(redirect) {
            return cb({
              redirect: redirect
            });
          },
          onError: function(err) {
            return cb(err);
          }
        });
        return router.run(function(Handler, routerState) {
          var html;
          if (routerState.routes[0].name === 'not-found') {
            html = React.renderToStaticMarkup(React.createElement(Handler));
            cb({
              notFound: true
            }, html);
            return;
          }
          return fetchData(context, routerState, function(err) {
            console.log("fetchData done");
            if (err) {
              return cb(err);
            }
            return renderApp(context, Handler, function(err, html) {
              console.log("render app done");
              if (err && err.notFound) {
                console.log("notfound: " + req.url);
                return res.status(404).send(html);
              }
              if (err && err.redirect) {
                return res.redirect(303, err.redirect.to);
              }
              if (err) {
                return next(err);
              }
              return res.send(html);
            });
          });
        });
      };
    })(this));
    server.listen(miki.config.port);
    return console.log('Listening on port ' + miki.config.port);
  };

  return Server;

})();

module.exports = new Server();
