// Generated by CoffeeScript 1.9.3
var FluxibleComponent, HistoryLocation, React, Router, app, dehydratedState, fetchData, renderApp, routes;

React = require('react');

app = require('../server/app');

Router = require('react-router');

HistoryLocation = Router.HistoryLocation;

FluxibleComponent = require('fluxible/addons/FluxibleComponent');

dehydratedState = window.App;

routes = require('../components/Routes.jsx');

window.React = React;

fetchData = require('../utils/fetchData');

renderApp = function(context, Handler) {
  var Component, mountNode;
  mountNode = document.getElementById('app');
  Component = React.createElement(Handler);
  return React.render(React.createElement(FluxibleComponent, {
    context: context.getComponentContext()
  }, Component), mountNode, function() {
    console.log('React Rendered');
  });
};

console.log("try app.rehydrate");

app.rehydrate(dehydratedState, function(err, context) {
  var firstRender, router;
  console.log("in app.rehydrate");
  if (err) {
    throw err;
  }
  window.context = context;
  firstRender = true;
  router = Router.create({
    routes: routes,
    location: Router.HistoryLocation,
    transitionContext: context
  });
  return router.run(function(Handler, routerState) {
    if (firstRender) {
      console.log("frist render");
      renderApp(context, Handler);
      return firstRender = false;
    } else {
      console.log("not first render try fetchdata");
      return fetchData(context, routerState, function() {
        return renderApp(context, Handler);
      });
    }
  });
});
